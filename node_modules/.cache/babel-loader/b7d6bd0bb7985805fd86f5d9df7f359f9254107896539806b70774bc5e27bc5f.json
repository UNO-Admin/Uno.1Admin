{"ast":null,"code":"import { objectsSliceActions } from \"..\";\nimport { selectUserId } from \"../../Auth/selectors\";\nimport { normolizeEntities } from \"../../helpers/normalizeEntites\";\nexport const getObjects = (dispatch, getState) => {\n  const userId = selectUserId(getState());\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    },\n    body: JSON.stringify({\n      getObjects: `select g.* from (select o.id, o.idsrv, o.name, c.name as city, o.dt, o.org_owner, o.phone, p.name as fran_name, o.worker, (select i.name from tblicense l join tbitems i on l.iditem = i.id where l.idorg = o.id and lastrec = true) as paket, (select klv from tblicense l where l.idorg = o.id and lastrec = true) as klv, (select sum(i.klv) from tblicense l join tblicense_item i on l.id = i.pid where l.idorg = o.id and l.lastrec = true and i.iditem = 4 and current_date between l.dtstart and l.dtend) as mob, coalesce((select sum(i.klv) > 0   from tblicense l   join tblicense_item i on l.id = i.pid   where l.idorg = o.id and   l.lastrec = true and   i.iditem = 5 and   current_date between i.dtstart and i.dtend), false) as tarif, coalesce((select sum(i.klv) > 0      from tblicense l      join tblicense_item i on l.id = i.pid      where l.idorg = o.id and      l.lastrec = true and      i.iditem = 6 and      current_date between i.dtstart and i.dtend), false) as qr, (select min(dtstart) from tblicense where idorg = o.id and lastrec = true) as startdt, (select max(dtend) from tblicense where idorg = o.id and lastrec = true) as enddt, (select sum(amount) from tblicense where idorg = o.id and lastrec = true) as amount, o.tmpcode from tborgs o join franchisee f on o.idfran = f.id join tbcity c on f.idcity = c.id join peoples p on f.idpeople = p.id where coalesce(p.bdel, false) = false and decode((select idaccess from peoples where id = 1), 1, p.id, 1) in (p.pid, p.id)) g;`\n    })\n  };\n  dispatch(objectsSliceActions.startLoading());\n  const url = new URL(\"http://localhost:4000/getObjects\");\n  fetch(url, options).then(res => res.json()).then(data => {\n    dispatch(objectsSliceActions.successLoading(normolizeEntities(data)));\n  }).catch(err => {\n    dispatch(objectsSliceActions.failLoading(err));\n  });\n};","map":{"version":3,"names":["objectsSliceActions","selectUserId","normolizeEntities","getObjects","dispatch","getState","userId","options","method","headers","body","JSON","stringify","startLoading","url","URL","fetch","then","res","json","data","successLoading","catch","err","failLoading"],"sources":["D:/dev/uno/client/src/store/Objects/Thunks/getObjects.js"],"sourcesContent":["import { objectsSliceActions } from \"..\";\r\nimport { selectUserId } from \"../../Auth/selectors\";\r\nimport { normolizeEntities } from \"../../helpers/normalizeEntites\";\r\n\r\nexport const getObjects = (dispatch, getState) => {\r\n  const userId = selectUserId(getState());\r\n\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json;charset=utf-8\",\r\n    },\r\n    body: JSON.stringify({\r\n      getObjects: `select g.* from (select o.id, o.idsrv, o.name, c.name as city, o.dt, o.org_owner, o.phone, p.name as fran_name, o.worker, (select i.name from tblicense l join tbitems i on l.iditem = i.id where l.idorg = o.id and lastrec = true) as paket, (select klv from tblicense l where l.idorg = o.id and lastrec = true) as klv, (select sum(i.klv) from tblicense l join tblicense_item i on l.id = i.pid where l.idorg = o.id and l.lastrec = true and i.iditem = 4 and current_date between l.dtstart and l.dtend) as mob, coalesce((select sum(i.klv) > 0   from tblicense l   join tblicense_item i on l.id = i.pid   where l.idorg = o.id and   l.lastrec = true and   i.iditem = 5 and   current_date between i.dtstart and i.dtend), false) as tarif, coalesce((select sum(i.klv) > 0      from tblicense l      join tblicense_item i on l.id = i.pid      where l.idorg = o.id and      l.lastrec = true and      i.iditem = 6 and      current_date between i.dtstart and i.dtend), false) as qr, (select min(dtstart) from tblicense where idorg = o.id and lastrec = true) as startdt, (select max(dtend) from tblicense where idorg = o.id and lastrec = true) as enddt, (select sum(amount) from tblicense where idorg = o.id and lastrec = true) as amount, o.tmpcode from tborgs o join franchisee f on o.idfran = f.id join tbcity c on f.idcity = c.id join peoples p on f.idpeople = p.id where coalesce(p.bdel, false) = false and decode((select idaccess from peoples where id = 1), 1, p.id, 1) in (p.pid, p.id)) g;`,\r\n    }),\r\n  };\r\n  dispatch(objectsSliceActions.startLoading())\r\n\r\n  const url = new URL(\"http://localhost:4000/getObjects\");\r\n\r\n  fetch(url, options)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      dispatch(objectsSliceActions.successLoading(normolizeEntities(data)))\r\n    })\r\n    .catch((err) => {\r\n      dispatch(objectsSliceActions.failLoading(err))\r\n    });\r\n};\r\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,IAAI;AACxC,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,iBAAiB,QAAQ,gCAAgC;AAElE,OAAO,MAAMC,UAAU,GAAG,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAChD,MAAMC,MAAM,GAAGL,YAAY,CAACI,QAAQ,EAAE,CAAC;EAEvC,MAAME,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBT,UAAU,EAAG;IACf,CAAC;EACH,CAAC;EACDC,QAAQ,CAACJ,mBAAmB,CAACa,YAAY,EAAE,CAAC;EAE5C,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,kCAAkC,CAAC;EAEvDC,KAAK,CAACF,GAAG,EAAEP,OAAO,CAAC,CAChBU,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;IACdhB,QAAQ,CAACJ,mBAAmB,CAACqB,cAAc,CAACnB,iBAAiB,CAACkB,IAAI,CAAC,CAAC,CAAC;EACvE,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAG,IAAK;IACdnB,QAAQ,CAACJ,mBAAmB,CAACwB,WAAW,CAACD,GAAG,CAAC,CAAC;EAChD,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}