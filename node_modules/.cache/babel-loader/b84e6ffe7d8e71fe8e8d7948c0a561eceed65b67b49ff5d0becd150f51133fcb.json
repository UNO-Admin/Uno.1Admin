{"ast":null,"code":"import { usersSliceActions } from \"..\";\nimport { normolizeEntities } from \"../../helpers/normalizeEntites\";\nexport const loadUsers = dispatch => {\n  // console.log(userId)\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    },\n    body: JSON.stringify({\n      getCity: `select p.id,p.pid,p.name,p.email,p.phone,p.pass,p.idaccess,decode(p.idaccess,1,'admin',2,'master franchises',3,'user')as rolename, (select list(c.name,', ') from franchisee f join tbcity c on f.idcity=c.id where f.idpeople=p.id)as franch, balance, bdel from peoples p where coalesce(p.bdel, false) = false and coalesce(pid,0) = decode((select idaccess from peoples where id=${userId}),1,coalesce(pid,0),2,(select id from peoples where id=${userId}))`\n    })\n  };\n  dispatch(usersSliceActions.startLoading());\n  const url = new URL(\"http://localhost:4000/getUsers\");\n  fetch(url, options).then(res => res.json()).then(data => {\n    dispatch(usersSliceActions.successLoading(normolizeEntities(data)));\n  }).catch(err => {\n    console.log(err);\n    dispatch(usersSliceActions.failLoading());\n  });\n};","map":{"version":3,"names":["usersSliceActions","normolizeEntities","loadUsers","dispatch","options","method","headers","body","JSON","stringify","getCity","userId","startLoading","url","URL","fetch","then","res","json","data","successLoading","catch","err","console","log","failLoading"],"sources":["C:/Development/11312/client/src/store/Users/middlewares/loadUsersIfNotExist.js"],"sourcesContent":["import { usersSliceActions } from \"..\";\r\nimport { normolizeEntities } from \"../../helpers/normalizeEntites\";\r\n\r\n\r\n\r\nexport const loadUsers = (dispatch) => {\r\n  // console.log(userId)\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json;charset=utf-8\",\r\n    },\r\n    body: JSON.stringify({\r\n      getCity: `select p.id,p.pid,p.name,p.email,p.phone,p.pass,p.idaccess,decode(p.idaccess,1,'admin',2,'master franchises',3,'user')as rolename, (select list(c.name,', ') from franchisee f join tbcity c on f.idcity=c.id where f.idpeople=p.id)as franch, balance, bdel from peoples p where coalesce(p.bdel, false) = false and coalesce(pid,0) = decode((select idaccess from peoples where id=${userId}),1,coalesce(pid,0),2,(select id from peoples where id=${userId}))`,\r\n    }),\r\n  };\r\n\r\n  dispatch(usersSliceActions.startLoading());\r\n\r\n  const url = new URL(\"http://localhost:4000/getUsers\");\r\n\r\n  fetch(url, options)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      dispatch(usersSliceActions.successLoading(normolizeEntities(data)));\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(usersSliceActions.failLoading());\r\n    });\r\n};\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,IAAI;AACtC,SAASC,iBAAiB,QAAQ,gCAAgC;AAIlE,OAAO,MAAMC,SAAS,GAAIC,QAAQ,IAAK;EACrC;EACA,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,OAAO,EAAG,yXAAwXC,MAAO,0DAAyDA,MAAO;IAC3c,CAAC;EACH,CAAC;EAEDR,QAAQ,CAACH,iBAAiB,CAACY,YAAY,EAAE,CAAC;EAE1C,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,gCAAgC,CAAC;EAErDC,KAAK,CAACF,GAAG,EAAET,OAAO,CAAC,CAChBY,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;IACdhB,QAAQ,CAACH,iBAAiB,CAACoB,cAAc,CAACnB,iBAAiB,CAACkB,IAAI,CAAC,CAAC,CAAC;EACrE,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAG,IAAK;IACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChBnB,QAAQ,CAACH,iBAAiB,CAACyB,WAAW,EAAE,CAAC;EAC3C,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}