{"ast":null,"code":"import { objectsSliceActions } from \"..\";\nimport { selectUserId } from \"../../Auth/selectors\";\nimport { normolizeEntities } from \"../../helpers/normalizeEntites\";\nimport { selectObjectsIds } from \"../selectors\";\nexport const getObjects = _ref => {\n  let {\n    userId\n  } = _ref;\n  return dispatch => {\n    var _selectObjectsIds;\n    if (((_selectObjectsIds = selectObjectsIds(getState())) === null || _selectObjectsIds === void 0 ? void 0 : _selectObjectsIds.lenght) > 0) {\n      console.log('!!');\n      return;\n    }\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      },\n      body: JSON.stringify({\n        getObjects: `select g.* from (select o.id, o.idsrv, o.name, c.name as city, o.dt, o.org_owner, o.phone, p.name as fran_name, o.worker, (select i.name from tblicense l join tbitems i on l.iditem = i.id where l.idorg = o.id and lastrec = true) as paket, (select klv from tblicense l where l.idorg = o.id and lastrec = true) as klv, (select sum(i.klv) from tblicense l join tblicense_item i on l.id = i.pid where l.idorg = o.id and l.lastrec = true and i.iditem = 4 and current_date between l.dtstart and l.dtend) as mob, coalesce((select sum(i.klv) > 0   from tblicense l   join tblicense_item i on l.id = i.pid   where l.idorg = o.id and   l.lastrec = true and   i.iditem = 5 and   current_date between i.dtstart and i.dtend), false) as tarif, coalesce((select sum(i.klv) > 0      from tblicense l      join tblicense_item i on l.id = i.pid      where l.idorg = o.id and      l.lastrec = true and      i.iditem = 6 and      current_date between i.dtstart and i.dtend), false) as qr, (select min(dtstart) from tblicense where idorg = o.id and lastrec = true) as startdt, (select max(dtend) from tblicense where idorg = o.id and lastrec = true) as enddt, (select sum(amount) from tblicense where idorg = o.id and lastrec = true) as amount, o.tmpcode from tborgs o join franchisee f on o.idfran = f.id join tbcity c on f.idcity = c.id join peoples p on f.idpeople = p.id where coalesce(p.bdel, false) = false and decode((select idaccess from peoples where id = ${userId}), ${userId}, p.id, ${userId}) in (p.pid, p.id)) g;`\n      })\n    };\n    dispatch(objectsSliceActions.startLoading());\n    const url = new URL(\"http://localhost:4000/getObjects\");\n    fetch(url, options).then(res => res.json()).then(data => {\n      dispatch(objectsSliceActions.successLoading(normolizeEntities(data, 'IDSRV')));\n    }).catch(err => {\n      dispatch(objectsSliceActions.failLoading(err));\n    });\n  };\n};","map":{"version":3,"names":["objectsSliceActions","selectUserId","normolizeEntities","selectObjectsIds","getObjects","userId","dispatch","getState","lenght","console","log","options","method","headers","body","JSON","stringify","startLoading","url","URL","fetch","then","res","json","data","successLoading","catch","err","failLoading"],"sources":["C:/Development/11312/client/src/store/Objects/Thunks/getObjects.js"],"sourcesContent":["import { objectsSliceActions } from \"..\";\r\nimport { selectUserId } from \"../../Auth/selectors\";\r\nimport { normolizeEntities } from \"../../helpers/normalizeEntites\";\r\nimport { selectObjectsIds } from \"../selectors\";\r\n\r\nexport const getObjects = ({userId}) => (dispatch) => {\r\n  if (selectObjectsIds(getState())?.lenght > 0 ) {\r\n    console.log('!!')\r\n    return \r\n  }\r\n\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json;charset=utf-8\",\r\n    },\r\n    body: JSON.stringify({\r\n      getObjects: `select g.* from (select o.id, o.idsrv, o.name, c.name as city, o.dt, o.org_owner, o.phone, p.name as fran_name, o.worker, (select i.name from tblicense l join tbitems i on l.iditem = i.id where l.idorg = o.id and lastrec = true) as paket, (select klv from tblicense l where l.idorg = o.id and lastrec = true) as klv, (select sum(i.klv) from tblicense l join tblicense_item i on l.id = i.pid where l.idorg = o.id and l.lastrec = true and i.iditem = 4 and current_date between l.dtstart and l.dtend) as mob, coalesce((select sum(i.klv) > 0   from tblicense l   join tblicense_item i on l.id = i.pid   where l.idorg = o.id and   l.lastrec = true and   i.iditem = 5 and   current_date between i.dtstart and i.dtend), false) as tarif, coalesce((select sum(i.klv) > 0      from tblicense l      join tblicense_item i on l.id = i.pid      where l.idorg = o.id and      l.lastrec = true and      i.iditem = 6 and      current_date between i.dtstart and i.dtend), false) as qr, (select min(dtstart) from tblicense where idorg = o.id and lastrec = true) as startdt, (select max(dtend) from tblicense where idorg = o.id and lastrec = true) as enddt, (select sum(amount) from tblicense where idorg = o.id and lastrec = true) as amount, o.tmpcode from tborgs o join franchisee f on o.idfran = f.id join tbcity c on f.idcity = c.id join peoples p on f.idpeople = p.id where coalesce(p.bdel, false) = false and decode((select idaccess from peoples where id = ${userId}), ${userId}, p.id, ${userId}) in (p.pid, p.id)) g;`,\r\n    }),\r\n  };\r\n  dispatch(objectsSliceActions.startLoading())\r\n\r\n  const url = new URL(\"http://localhost:4000/getObjects\");\r\n\r\n  fetch(url, options)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      dispatch(objectsSliceActions.successLoading(normolizeEntities(data, 'IDSRV')))\r\n    })\r\n    .catch((err) => {\r\n      dispatch(objectsSliceActions.failLoading(err))\r\n    });\r\n};\r\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,IAAI;AACxC,SAASC,YAAY,QAAQ,sBAAsB;AACnD,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,cAAc;AAE/C,OAAO,MAAMC,UAAU,GAAG;EAAA,IAAC;IAACC;EAAM,CAAC;EAAA,OAAMC,QAAQ,IAAK;IAAA;IACpD,IAAI,sBAAAH,gBAAgB,CAACI,QAAQ,EAAE,CAAC,sDAA5B,kBAA8BC,MAAM,IAAG,CAAC,EAAG;MAC7CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;MACjB;IACF;IAEA,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBZ,UAAU,EAAG,u6CAAs6CC,MAAO,MAAKA,MAAO,WAAUA,MAAO;MACz9C,CAAC;IACH,CAAC;IACDC,QAAQ,CAACN,mBAAmB,CAACiB,YAAY,EAAE,CAAC;IAE5C,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,kCAAkC,CAAC;IAEvDC,KAAK,CAACF,GAAG,EAAEP,OAAO,CAAC,CAChBU,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdlB,QAAQ,CAACN,mBAAmB,CAACyB,cAAc,CAACvB,iBAAiB,CAACsB,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAChF,CAAC,CAAC,CACDE,KAAK,CAAEC,GAAG,IAAK;MACdrB,QAAQ,CAACN,mBAAmB,CAAC4B,WAAW,CAACD,GAAG,CAAC,CAAC;IAChD,CAAC,CAAC;EACN,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}