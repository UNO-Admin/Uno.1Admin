{"ast":null,"code":"import { usersSliceActions } from \"..\";\nimport { normolizeEntities } from \"../../helpers/normalizeEntites\";\nimport { selectUsersIds } from \"../selectors\";\nconst REQ_PARAM = \"select G.* from (select O.ID, O.IDSRV, O.NAME, C.NAME as CITY, O.DT, O.ORG_OWNER, O.PHONE, P.NAME as FRAN_NAME, O.WORKER, (select I.NAME from TBLICENSE L join TBITEMS I on L.IDITEM = I.ID where L.IDORG = O.ID and LASTREC = true) as PAKET, (select KLV from TBLICENSE L where L.IDORG = O.ID and LASTREC = true) as KLV, (select sum(I.KLV) from TBLICENSE L join TBLICENSE_ITEM I on L.ID = I.PID where L.IDORG = O.ID and L.LASTREC = true and I.IDITEM = 4 and current_date between L.DTSTART and L.DTEND) as MOB, coalesce((select sum(I.KLV) > 0   from TBLICENSE L   join TBLICENSE_ITEM I on L.ID = I.PID   where L.IDORG = O.ID and   L.LASTREC = true and   I.IDITEM = 5 and   current_date between I.DTSTART and I.DTEND), false) as TARIF, coalesce((select sum(I.KLV) > 0      from TBLICENSE L      join TBLICENSE_ITEM I on L.ID = I.PID      where L.IDORG = O.ID and      L.LASTREC = true and      I.IDITEM = 6 and      current_date between I.DTSTART and I.DTEND), false) as QR, (select min(DTSTART) from TBLICENSE where IDORG = O.ID and LASTREC = true) as STARTDT, (select max(DTEND) from TBLICENSE where IDORG = O.ID and LASTREC = true) as ENDDT, (select sum(AMOUNT) from TBLICENSE where IDORG = O.ID and LASTREC = true) as AMOUNT, O.TMPCODE from TBORGS O join FRANCHISEE F on O.IDFRAN = F.ID join TBCITY C on F.IDCITY = C.ID join PEOPLES P on F.IDPEOPLE = P.ID where coalesce(P.BDEL, false) = false and decode((select IDACCESS from PEOPLES where ID = 1), 1, P.ID, 1) in (P.PID, P.ID)) G;\";\nexport const loadUsersIfNotExist = (dispatch, getState) => {\n  var _selectUsersIds;\n  if (((_selectUsersIds = selectUsersIds(getState())) === null || _selectUsersIds === void 0 ? void 0 : _selectUsersIds.length) > 0) {\n    return;\n  }\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json;charset=utf-8\"\n    },\n    body: JSON.stringify({\n      getCity: REQ_PARAM\n    })\n  };\n  dispatch(usersSliceActions.startLoading());\n  const url = new URL(\"http://localhost:4000/getUsers\");\n  fetch(url, options).then(res => res.json()).then(data => dispatch(usersSliceActions.successLoading(normolizeEntities(data)))).catch(err => {\n    console.log(err);\n    dispatch(usersSliceActions.failLoading());\n  });\n};","map":{"version":3,"names":["usersSliceActions","normolizeEntities","selectUsersIds","REQ_PARAM","loadUsersIfNotExist","dispatch","getState","length","options","method","headers","body","JSON","stringify","getCity","startLoading","url","URL","fetch","then","res","json","data","successLoading","catch","err","console","log","failLoading"],"sources":["C:/Development/11312/client/src/store/Users/middlewares/loadUsersIfNotExist.js"],"sourcesContent":["import { usersSliceActions } from \"..\";\r\nimport { normolizeEntities } from \"../../helpers/normalizeEntites\";\r\nimport { selectUsersIds } from \"../selectors\";\r\n\r\nconst REQ_PARAM =\r\n \"select G.* from (select O.ID, O.IDSRV, O.NAME, C.NAME as CITY, O.DT, O.ORG_OWNER, O.PHONE, P.NAME as FRAN_NAME, O.WORKER, (select I.NAME from TBLICENSE L join TBITEMS I on L.IDITEM = I.ID where L.IDORG = O.ID and LASTREC = true) as PAKET, (select KLV from TBLICENSE L where L.IDORG = O.ID and LASTREC = true) as KLV, (select sum(I.KLV) from TBLICENSE L join TBLICENSE_ITEM I on L.ID = I.PID where L.IDORG = O.ID and L.LASTREC = true and I.IDITEM = 4 and current_date between L.DTSTART and L.DTEND) as MOB, coalesce((select sum(I.KLV) > 0   from TBLICENSE L   join TBLICENSE_ITEM I on L.ID = I.PID   where L.IDORG = O.ID and   L.LASTREC = true and   I.IDITEM = 5 and   current_date between I.DTSTART and I.DTEND), false) as TARIF, coalesce((select sum(I.KLV) > 0      from TBLICENSE L      join TBLICENSE_ITEM I on L.ID = I.PID      where L.IDORG = O.ID and      L.LASTREC = true and      I.IDITEM = 6 and      current_date between I.DTSTART and I.DTEND), false) as QR, (select min(DTSTART) from TBLICENSE where IDORG = O.ID and LASTREC = true) as STARTDT, (select max(DTEND) from TBLICENSE where IDORG = O.ID and LASTREC = true) as ENDDT, (select sum(AMOUNT) from TBLICENSE where IDORG = O.ID and LASTREC = true) as AMOUNT, O.TMPCODE from TBORGS O join FRANCHISEE F on O.IDFRAN = F.ID join TBCITY C on F.IDCITY = C.ID join PEOPLES P on F.IDPEOPLE = P.ID where coalesce(P.BDEL, false) = false and decode((select IDACCESS from PEOPLES where ID = 1), 1, P.ID, 1) in (P.PID, P.ID)) G;\"\r\nexport const loadUsersIfNotExist = (dispatch, getState) => {\r\n  if (selectUsersIds(getState())?.length > 0) {\r\n      return;\r\n    }\r\n\r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json;charset=utf-8\",\r\n    },\r\n    body: JSON.stringify({\r\n      getCity: REQ_PARAM,\r\n    }),\r\n  };\r\n\r\n  dispatch(usersSliceActions.startLoading());\r\n\r\n  const url = new URL(\"http://localhost:4000/getUsers\");\r\n\r\n  fetch(url, options)\r\n    .then((res) => res.json())\r\n    .then((data) => dispatch(usersSliceActions.successLoading(normolizeEntities(data))))\r\n    .catch((err) => {\r\n      console.log(err);\r\n      dispatch(usersSliceActions.failLoading());\r\n    });\r\n};\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,IAAI;AACtC,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,cAAc,QAAQ,cAAc;AAE7C,MAAMC,SAAS,GACd,08CAA08C;AAC38C,OAAO,MAAMC,mBAAmB,GAAG,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAAA;EACzD,IAAI,oBAAAJ,cAAc,CAACI,QAAQ,EAAE,CAAC,oDAA1B,gBAA4BC,MAAM,IAAG,CAAC,EAAE;IACxC;EACF;EAEF,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,OAAO,EAAEX;IACX,CAAC;EACH,CAAC;EAEDE,QAAQ,CAACL,iBAAiB,CAACe,YAAY,EAAE,CAAC;EAE1C,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,gCAAgC,CAAC;EAErDC,KAAK,CAACF,GAAG,EAAER,OAAO,CAAC,CAChBW,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAKjB,QAAQ,CAACL,iBAAiB,CAACuB,cAAc,CAACtB,iBAAiB,CAACqB,IAAI,CAAC,CAAC,CAAC,CAAC,CACnFE,KAAK,CAAEC,GAAG,IAAK;IACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChBpB,QAAQ,CAACL,iBAAiB,CAAC4B,WAAW,EAAE,CAAC;EAC3C,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}